version: 0.2

env:
  variables:
    IMAGE_REPOSITORY_NAME: "html-to-pdf-lambda"

phases:
  install:
    on-failure: ABORT
    runtime-versions:
      python: 3.11
    commands:
      - python -m venv venv
      - source venv/bin/activate
  pre_build:
    on-failure: ABORT
    commands:
      - pip install -r src/requirements.txt
      - pip install -r tests/requirements.txt
      # Create ECR repository if not exists
      - aws ecr describe-repositories --repository-names ${IMAGE_REPOSITORY_NAME} > /dev/null 2>&1 || aws ecr create-repository --repository-name ${IMAGE_REPOSITORY_NAME}
  build:
    on-failure: ABORT
    commands:
      - PYTHONPATH=src pytest
      - docker build -t ${IMAGE_REPOSITORY_NAME} .
      # 7 characters of the commit hash
      - IMAGE_TAG=$(echo "$CODEBUILD_RESOLVED_SOURCE_VERSION" | head -c 7)
      - IMAGE_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPOSITORY_NAME}:${IMAGE_TAG}"
      - docker tag ${IMAGE_REPOSITORY_NAME} ${IMAGE_URI}
      - aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
      - docker push ${IMAGE_URI}
      - sam package
        - --template-file template.yaml
        - --output-template-file build.yaml
        - --s3-bucket "${ARTIFACT_S3_BUCKET_NAME}"
        - --image-repository "${IMAGE_URI}"
      - echo '{"Parameters":{"ImageTag":"'"${IMAGE_TAG}"'"}}' > param.json
artifacts:
  files:
    - "build.yaml"
    - "param.json"
